C:\Users\shoaib\AppData\Local\Programs\Python\Python35\python.exe


####10x10 table code python

for i in range (1,11):
	print('{:<3}|'.format(i),end="")

	for j in range(1,11):
		print('{:>4}' .format(i*j),end="")


	if i == 1:
		 print('\n{:#^44}'.format(""),end="")

		 print("")

#################
WHILE loop python
condition = 10
while condition !=0:
	print(condition)
	condition = condition -1
#############infinite while loop

while True:
	print("Infinite")

break statement##############
while condition !=0:
	print(condition)
	condition = condition -1
	break
############continue statement

for i in range(1,11):
	if i == 5:
		
		continue
		
	print (i)
#######functions

def function():
	print ("This is our first function!")



function() #calling it 

#########returning value

def returning():
	return " i am a python programmer well thats what i think so"



result=returning()

print(result)

###############mulitvalue function

def multival():
    
    return "this is a result,",2

result=multival()

print(result)
#########parameter
def parameters(a):
	print(a)

parameters("this is a parameter")
####################
def add(a,b):
	c = a+b
	return c
	result = a()

result = add(12,5)
print (result)
################################

def add(a,b):
	c = a+b
	return c
	result = a()

result = add("one","word")
print (result)
######################default parameters
def default_param(a,b =4, c = 5):
	return a +b + c
result = default_param(3)
print(result)
########
#############scope
def scope (a):
	a = a + 1
	print (a)
	return a
scope(5)
print(a)#uncomment it to check how scope works

##########nested function
def outer(a):

	def nested(b):
		return b * a;

	a= nested(a)
	return a

print (outer(4))
###########nested function 2

def f (a):
	def g(b):
		def h(c):
			    return a * b * c
		return h

	return g

print(f(5)(2)(3))

################recursion

def factorial (n):
	if n == 1:
		return 1
	else:
		return n * factorial(n-1)
print (factorial(5))
################recursion by addition

def sum (n):
    if n == 1:
	    return 1
    else: 
        return n + sum(n-1)

def tail_sum(n, accumulator=0):
	if n == 0:
		return accumulator
	else:
		return tail_sum(n-1, accumulator+n)
print(sum(10))
print (tail_sum(10))
###############lambda function (nameless and in line function)
f= lambda x,y: x+y



print (f(2,3))
##############nested lambda function (inline function)
f= lambda a: lambda b: lambda c: a*b*c
print (f(5)(3)(2))

###############exception handling using try and except
try:
	a= 5/0
except Exception as e:
	print (e)
##############################
try:
	n = int(input("Enter an Integer:"))
except ValueError:
	print ("Thats not an Integer")
#########################


try:
	sum = 0
    file = open('numbers.txt','r')
    for number in file:
        sum = sum + 1.0/int(number)
    print(sum)
except ZeroDivisionError:
	print (" number in file equal to zero!")
except IOError:
	print("file DNE")
finally:
	print(sum)
	file.close()

#############throwing exception#########################
a = 'a'###########replace  'a' with 1 to check what it does

def RaiseException(a):
	if type(a)  != type('a'):
		raise ValueError("This is not string")
try:
	RaiseException(a)
except ValueError as e:
	print (e) 
##############excetion handling with assertion
def TestCase(a , b):
    assert a < b, "a is greater than b"
try:
	TestCase(2,1)
except AssertionError  as e:
	print (e)
#DATA INPUT

age =input ("How old are you:")

##########file Handling or management (read)
file = open("C:\\Users\\shoaib\\Desktop\\files.txt","r")
print (file.read(4))
file.seek(5)
print(file.tell())
################example 2
file = open("C:\\Users\\shoaib\\Desktop\\files.txt","r")
for line in file:
    print(line)
###################example 3

#file management

#open (filename, access, buffering)

file = open("C:\\Users\\shoaib\\Desktop\\file.txt","r")
print("File Name: " + file.name) 
print ("is closed: " + str(file.closed))
print("Mode " + file.mode)
##############file Handling or management (write) 
file = open("write.text","w+")
file.write("HEllo file. I am Shoaib just in case you didnt know me")
file.seek(0)
file.write("this")
print(file.read())
file.close()
#################
#############DATA Structures (Tuples)
tup = (1, 'abc', 2, 'cde')
tup1= 3, 'efg', True


tup2 = 'A' #TUP2 = ('A', )
#print(tup[0:2])
# try:
# 	tup[3] = 5 
# except Exception as e:
# 	print (e)
tup = tup [0:3] + (5,)
print(tup)
print(tup2 * 4)
print(5 in tup)
for x in ('a', 'b','c'):
	print(x)
def mul_result():
      return(1,2,'a')
print(mul_result())
print((1,2,3) == (1,2))
##########tuple function
tup = (2,3,4)
print (len(tup))
print (max(tup))
print(min(tup))
############lists
list1 = [1,'abc', (2,3)]
#print(list1[2][0])
#print (list1 * 2)
#print (2 in list1)
#print(list1[:2])
list1.append(6)
list1[len(list1):] = [7]
print(list1)
################ functions in list

#print(list(map(lambda x: x**2 +3*x +1,[1,2,3,4])))
#print(list(filter(lambda x: x <4,[1,2,3,4,5,4,3,2,1])))
import functools#had to import functool because reduce doesnt work directly in python3

print(functools.reduce(lambda x,y: x*y,[1,2,3,4]))
######Dictionaries#####
my_dictionary = {'Key' : 'VaLue', ('K', 'E', 'Y'):5}
my_dictionary1= {x: x +1 for x in range(10)}
# print(my_dictionary1['Key'])
# try:
# 	print(my_dictionary1[1])
# except Exception as e:
#     print(e)
#print(my_dictionary.keys())
#print(my_dictionary.values())
#my_dictionary[1]=2
my_dictionary.clear()
print(my_dictionary)
###############shallow copies
my_dictionary = {'Item': 'Shirt', 'Size':  'Medium', 'Price': 50}

my_dictionary1 = my_dictionary

print(my_dictionary)
my_dictionary['Size'] = 'Small'
print(my_dictionary1)
###############Sets
my_set = set(['one','two','three','one'])
my_set1= set(['two', 'three','four'])
my_set.add('five')
print (my_set)
##########sets function
my_set = set(['one','two','three','one'])
my_set1= set(['two', 'three','four'])

#print(set.union(my_set,my_set1))
#print(set.intersection(my_set,my_set1))
print(set.difference(my_set,my_set1))

##################Modules and Packages#########
#from prime import PrimesTo


#pr.PrimesTo(100)
#PrimesTo(100)
import prime
print(dir(prime))
#############second file for the above code which we have to import

def IsPrime(n):
	for x in range (2, int(n / 2 + 1)):
		if not n % x:
			return False;
	return True;

def PrimesTo(n):
	for x in range(2, n):
		if IsPrime(x):
			print(x)

###############Packages##########
# import main.sub2.prime as sub2


# sub2.PrimesTo(100)
from main.sub2.prime import PrimesTo

PrimesTo(100)
###################built in modules
# import copy
import math as m 
import cmath as cm
import random as ran
import sys
# print(m.exp(1))
# my_dictionary = {'Key': 'Values', ('K','E','Y'):5}
# my_dictionary1= copy.deepcopy(my_dictionary)
# my_dictionary[1] = 1
# print(my_dictionary)
# print(my_dictionary1)
# print (cm.sqrt(4))
# print(cm.polar(complex(0,1)))
# print(ran.sample([1,2,3,4,5],3))
# print(ran.random())
# print(ran.randint(5,100))
# print(sys.getrecursionlimit())
# print(sys.version)
# print(sys.path)
################Object Oriented Programming
#working on class write now

class Complex:
	'this class simulates complex numbers'
	def __init__(self,real= 0,imag= 0):

	  self.real = real
	  self.imag = imag
try:
   c= Complex(2)
   print(c.real, c.imag)
except Exception as e:
    print(e)
#############Class Definition and Instantiation############
class Complex:
    'this class simulates complex numbers'
    def __init__(self,real= 0,imag= 0):
        if(type(real) not in (int,float)) or type(imag) not in(int,float):
            raise Exception ('Args are not numbers!')
        self.real = real
        self.imag = imag

try:
   
   c= Complex(2,4)
   print(c.real, c.imag)

except Exception as e:
     print (e)
################class method######################
#OOP

class Complex:
    'this class simulates complex numbers'
    def __init__(self,real= 0,imag= 0):
        if(type(real) not in (int,float)) or type(imag) not in(int,float):
            raise Exception ('Args are not numbers!')
        self.real = real
        self.imag = imag
    def GetReal(self):
        return self.real
    def GetImag(self):    
        return self.imag
    def SetReal(self,val):
        self.real = val
    def SetImag(self,val):
        self.imag = val
# c= Complex(2.5, 5.2)
# print(c.GetReal(),c.GetImag())
c = Complex()
c.SetImag(1)
c.SetReal(2)
print(c.GetReal(),c.GetImag())

# try:
   
#    c= Complex(2,4)
#    print(c.real, c.imag)

# except Exception as e:
#      print (e)

################## Class Methods 2############################
#OOP

import math
class Complex:
    'this class simulates complex numbers'
    def __init__(self,real= 0,imag= 0):
        if(type(real) not in (int,float)) or type(imag) not in(int,float):
            raise Exception ('Args are not numbers!')
        self.SetReal(real)
        self.SetImag(imag)
    def GetReal(self):
        return self.__real
    def GetImag(self):    
        return self.__imag
    def GetModulus(self):
        return math.sqrt(self.GetReal() * self.GetReal() + self.GetImag()*self.GetImag()*self.GetImag())
    def GetPhi(self):
        return math.atan2(self.GetImag(), self.GetReal())
    def SetReal(self,val):
        if type(val) not in (int, float):
            raise Exception('real part must be a number')
        self.__real = val
    def SetImag(self,val):
        if type(val) not in (int, float):
            raise Exception('imag part must be a number')
        self.__imag = val

c = Complex(-3,4)
print (c.GetModulus(), c.GetPhi())

# c= Complex()

# try:
#      c.SetReal((1,2,3))
# except Exception as e:
#     print(e)
# # c= Complex(2.5, 5.2)
# print(c.GetReal(),c.GetImag())
# c = Complex()
# c.SetImag(1)
# c.SetReal(2)
# print(c.GetReal(),c.GetImag())
# c= Complex()

# try:
#     c.__real
# except Exception as e:
#     print(e)
    # c.SetReal((1,2,3))

# try:
   
#    c= Complex(2,4)
#    print(c.real, c.imag)

# except Exception as e:
#      print (e)
######################Operator Overloading################
#OOP 
#iNHERITANCE
class Vehicle:
    def __init__(self, VIN , weight, manufacturer):
          self.vin_number = VIN
          self.weight = weight
          self.manufacturer = manufacturer
    def GetWeight(self):
        return self.weight
    def GetManufacturer(self):
        return self.manufacturer
    def VehicleType(self):
        pass
class Car(Vehicle):
    def __init__(self, VIN, weight, manufacturer, seats):
         self.vin_number = VIN
         self.weight = weight
         self.seats = seats
         self.manufacturer = manufacturer
    def NumberOfSeats(self):
        return self.seats
    def VehicleType(self):
        return 'CAR'


class Truck(Vehicle):
    def __init__(self, VIN, weight, manufacturer, capacity):
         self.vin_number = VIN
         self.weight = weight
         self.capacity = capacity
         self.manufacturer = manufacturer
    def TransportCapacity(self):
        return self.capacity
    def VehicleType(self):
        return 'TRUCK'
a = Car('ABC1', 1000, 'BMW', 4) 
b= Truck('BCD2',1000, 'MAN', 10000)
c= Car ('DEF3', 1200, 'FORD' , 4)
d= Truck('EFG4', 11000, 'MERCEDES', 15000)

print (a.GetWeight(), b.GetManufacturer(), c.NumberOfSeats(), d.TransportCapacity())
for v in [a,b,c,d]:
    print (v.GetManufacturer(),v.VehicleType())   
###########oop extra code
class Student(object):
	"""Student"""
	number_of_students = 0

	def __int__(self, name, index):
		self.name = name
		self.index = index
		Student.number_of_students += 1
	def _del_(self):

s1 = Student('Python Pythonski', 12345)
s2 = Student('Guido van Rossum', 34567)\
# print(Student.number_of_students, s1.number_of_students, s2.number_of_students)
del s1
print(Student.number_of_students)

##################Data Visualization#######################
#code in word file with graphs
#here to
#VISUALIZATION in Python
import matplotlib.pyplot as plt
fig = plt.figure("Histogram")
ax = fig.add_subplot(1,1,1)
ax.hist([21,12,23,35,45,60,33,22,56,34,28,40,41],bins =7, facecolor = 'r', normed = True)


plt.title("Distribution")
plt.xlabel("Range")
plt.ylabel("Amount")
plt.show()

fig = plt.figure('Box-plot')
ax1= fig.add_subplot(1,1,1)
ax1.boxplot([21,12,23,35,45,60,33,22,56,34,28,40,41])
plt.show()

fig3 = plt.figure('Bar')
ax2= fig3.add_subplot(1,1,1)
ax2.set_xlabel('X')
ax2.set_ylabel('Y')
ax2.set_title("Bars")
ax2.bar([0,1,2,3],[5,10,15,5],[0.5,1,1.3,1],color=['b','r'])
plt.show()

fig4 = plt.figure('Line')
ax3 = fig4.add_subplot(1,1,1)
ax3.set_xlim([-2,10])
ax3.set_ylim([0,6])
ax3.set_xlabel('X')
ax3.set_ylabel('Y')
ax3.set_title("Lines")
ax3.plot([-1,2,4,7,8],[5,2,3,4,3],'r')
plt.show()

data = {'Player':['Wade', 'James', 'Kobe','Curry' ],
         'First':[10,10,8,12],
         'Second':[12,8,13,8],
         'Third':[15,12,8,8],
         'Fourth':[18,20,15,8]}

fig5 = plt.figure('Stacked bar')
ax4 = fig5.add_subplot(1,1,1)
bar_width = 0.5
bars = [i+1 for i in range(len(data['First'] ))]
ticks = [i + (bar_width/2) for i in bars]
ax4.bar(bars,
	    data ['First'],
	    width = bar_width,
	    label = 'First Quater',
	    color =  '#AA5439')
ax4.bar(bars,
	    data['Second'],
	    width = bar_width,
	    bottom = data['First'],
	    label = 'Second Quarter',
	    color = '#FFD600'
	    )
ax4.bar(bars,
	     data ['Third'],
	     width = bar_width,
	     bottom = [1+j for i, j in zip(data['First'],data['Second'])],
	     color = '#FF9200'
	     )
ax4.bar(bars,
	    data['Fourth'],
	    width = bar_width,
	    bottom = [i+j+k for i,j,k in zip(data['First'],data['Second'],data['Third'])],
        label = 'Fourth Quarter',
        color = 'r')
plt.xticks(ticks,data['Player'])
ax4.set_xlabel("Total")
ax4.set_ylabel("Player")
plt.legend(loc = 'upper right')
plt.xlim([min(ticks) - bar_width, max(ticks)+bar_width])
plt.show()

fig6= plt.figure("Scatter")
ax5= fig6.add_subplot(1,1,1)
ax5.scatter([-1,0,2,3,5],[2,1,3,0.5,4],[120,200,300,150,30],['r','g','#BCDFF0','#BB5500'])
plt.show()

fig8 = plt.figure('Pie')
sizes = [50,50,44,36]
labels = ['wade','james', 'kobe', 'curry']
explode = (0.1,0,0,0)
color= ['red','purple', 'yellow', 'blue']
plt.pie(sizes, explode = explode, labels=labels, colors=color,autopct='%1.1f%%',shadow =True, startangle=140)
plt.axis('equal')
plt.show()
####################Data Analysis#######################

import pandas as pd
df= pd.read_csv('AirPassengers.csv')
print(df['AirPassengers'])
print (df['time'][135])

names = ['Wade','james','Kobe', 'Curry']
total = [55,50,44,36]
data_set = list(zip(names,total))
data_frame = pd.DataFrame(data = data_set, columns = ['Names','Total'])
data_frame.to_csv('points.csv',index =True, header= True)
############## ARRAYS USING NUMPY LIBRARY################################


import numpy as np

# a1= np.array([2,1,3,4])
# print(a1)
# a2 = np.array([[1,2,1],[2,1,2],[1,2,3]])
# print(a2)#2d array
# a3= np.array([[[1,1,1],[1,1,1]], [[2,2,2],[2,2,2]], [[3,3,3],[3,3,3]]])
# print(a3)#3d array
a4= np.arange(10,50,10)
a5= np.arange(10,20)
a6= np.arange(10,20)
a7= np.arange(0.3,2,0.2)
a8=np.linspace(3, 8, 9)

# print (a7)
# print(a8)
o1 = np.ones((2,2,2))
o2 = np.zeros((2,2,2))
e1=np.empty((3,4))
print (e1)
# print (o1)
print(o2)
e2 = np.eye(3)
print (e2)
r1= np.random.random((5,5))
print(r1)

##################### functions in numpy########################


import numpy as np

a1= np.array([2,1,3,4])
print(a1)
a2 = np.array([[1,2,1],[2,1,2],[1,2,3]])
print(a2)#2d array
a3= np.array([[[1,1,1],[1,1,1]], [[2,2,2],[2,2,2]], [[3,3,3],[3,3,3]]])
print(a3)#3d array
a4= np.arange(10,50,10)
a5= np.arange(10,20)
a6= np.arange(10,20)
a7= np.arange(0.3,2,0.2)
a8=np.linspace(3, 8, 9)

# print (a7)
# print(a8)
# o1 = np.ones((2,2,2))
# o2 = np.zeros((2,2,2))
# e1=np.empty((3,4))
# print (e1)
# # print (o1)
# print(o2)
# print (a3.ndim)
# e2 = np.eye(3)
# print (e2)
# r1= np.random.random((5,5))
# print(r1)
# print(a2.shape)
# print(a2.size)
# print (a2.dtype)
# print(e2.itemsize)
# try:
#    print(a3.reshape(3,6))
# except Exception as e:
#        print(e)
# a3.resize(3,2,3)
# print (a3[0,:,:])
# print (a3[0,...])
# # print (a3[0])
# a3.resize(3,2,3)

# print (a3[1:3])


# print (a3[1:3, 0 , 1:3])
# print (a3)
# c1=np.arange(15)
# b1 = c1 > 9
# print(c1)
# print(b1)
# c1[b1] =9
# r1= np.random.random((5,5))

# c2= np.arange(25).reshape(5,5)

# # print (c2.max())
# # print(c2.min())
# # print(c2.cumsum())
# # print(c2.max(axis=0))
# # print(c2.max(axis=1))
# # print(c2.min(axis=0))
# print(c2.min(axis=1))
# print(c2.cumsum(axis = 0))
# # print(c2.cumsum(axis=1))
# # c3 = c2

# # c3[0,0] = 16

# # print(c2 is c3)
# # print(c3)

# v1 = np.array([2,1,3,4])
# v2 = np.array([5,1,7,6])
# print(np.vstack((v1,v2)))
# print(np.hstack((v1,v2)))
###############basic operations in numpy############
import numpy as np

# x= np.linspace(0,6.28,20)
# print (np.tan(x))

# x= np.arange(9).reshape(3,3)
# y= np.arange(10,19).reshape(3,3)
# print(x*y)
# print(x-y)

# # print(x > 4)
# print (x < 4)
# print(x**3)
# print(np.exp(x))
# print( x + 4)
a = np.array([[1,1],[2,2],[3,3]])
b = np.array([[1,2,3,4,5],[1,2,3,4,5]])
print (a.dot(b))
print (np.dot(a,b))
############ Debugging By pdb Module#############
import pdb

# pdb.run('pdb_test.Test(2,5')
print('Statement 1') 

for i in range(5):
	print('Statement' + str(i +2))
pdb.set_trace()
print('Statement 7')
pdb.pm()
##########
import pdb

def fun1(a):
	if a % 2:
		return True
    else:
    	return False
def fun2(x):
	if type(x) is int:
		pdb.set_trace()
		print(fun1(x))
    else:
    	print('Not defined')
####################Debugging Commands in pdb module####################################
#code



def IsPrime(n):
	for x in range(2, n // 2+1):
		     if not n % x:
		     	      return False;
	return True;

def PrimesTo(n):
	for x in range(2, n):
		    if IsPrime(x):
		    	    print(x)

PrimesTo(50)
###########Command prompt commands####################
Microsoft Windows [Version 10.0.10586]
(c) 2015 Microsoft Corporation. All rights reserved.

C:\Users\shoaib>cd Desktop

C:\Users\shoaib\Desktop>cd
C:\Users\shoaib\Desktop

C:\Users\shoaib\Desktop>cd Debugging

C:\Users\shoaib\Desktop\Debugging>python -m pdb test.py
> c:\users\shoaib\desktop\debugging\test.py(3)<module>()
-> def Test(a,b):
(Pdb) exit

C:\Users\shoaib\Desktop\Debugging>python -m pdb test.py
> c:\users\shoaib\desktop\debugging\test.py(3)<module>()
-> def Test(a,b):
(Pdb) exit

C:\Users\shoaib\Desktop\Debugging>python -m pdb test.py
> c:\users\shoaib\desktop\debugging\test.py(3)<module>()
-> def IsPrime(n):
(Pdb) break IsPrime
Breakpoint 1 at c:\users\shoaib\desktop\debugging\test.py:3
(Pdb) l 1,13
  1
  2
  3 B-> def IsPrime(n):
  4             for x in range(2, n // 2+1):
  5                          if not n % x:
  6                                   return False;
  7             return True;
  8
  9     def PrimesTo(n):
 10             for x in range(2, n):
 11                         if IsPrime(x):
 12                                 print(x)
 13
(Pdb) l 1,14
  1
  2
  3 B-> def IsPrime(n):
  4             for x in range(2, n // 2+1):
  5                          if not n % x:
  6                                   return False;
  7             return True;
  8
  9     def PrimesTo(n):
 10             for x in range(2, n):
 11                         if IsPrime(x):
 12                                 print(x)
 13
 14     PrimesTo(50)
(Pdb) continue
> c:\users\shoaib\desktop\debugging\test.py(4)IsPrime()
-> for x in range(2, n // 2+1):
(Pdb) break
Num Type         Disp Enb   Where
1   breakpoint   keep yes   at c:\users\shoaib\desktop\debugging\test.py:3
        breakpoint already hit 1 time
(Pdb) disable 1
Disabled breakpoint 1 at c:\users\shoaib\desktop\debugging\test.py:3
(Pdb) continue
2
3
5
7
11
13
17
19
23
29
31
37
41
43
47
The program finished and will be restarted
> c:\users\shoaib\desktop\debugging\test.py(3)<module>()
-> def IsPrime(n):
(Pdb) run
Restarting test.py with arguments:
        test.py
> c:\users\shoaib\desktop\debugging\test.py(3)<module>()
-> def IsPrime(n):
(Pdb) continue
2
3
5
7
11
13
17
19
23
29
31
37
41
43
47
The program finished and will be restarted
> c:\users\shoaib\desktop\debugging\test.py(3)<module>()
-> def IsPrime(n):
(Pdb) enable 1
Enabled breakpoint 1 at c:\users\shoaib\desktop\debugging\test.py:3
(Pdb) tbreak 4
Breakpoint 2 at c:\users\shoaib\desktop\debugging\test.py:4
(Pdb) break
Num Type         Disp Enb   Where
1   breakpoint   keep yes   at c:\users\shoaib\desktop\debugging\test.py:3
        breakpoint already hit 1 time
2   breakpoint   del  yes   at c:\users\shoaib\desktop\debugging\test.py:4
(Pdb) continue
Deleted breakpoint 2 at c:\users\shoaib\desktop\debugging\test.py:4
> c:\users\shoaib\desktop\debugging\test.py(4)IsPrime()
-> for x in range(2, n // 2+1):
(Pdb) break
Num Type         Disp Enb   Where
1   breakpoint   keep yes   at c:\users\shoaib\desktop\debugging\test.py:3
        breakpoint already hit 1 time
(Pdb) break 4, n > 3
Breakpoint 3 at c:\users\shoaib\desktop\debugging\test.py:4
(Pdb)
Breakpoint 4 at c:\users\shoaib\desktop\debugging\test.py:4
(Pdb) continue
2
3
> c:\users\shoaib\desktop\debugging\test.py(4)IsPrime()
-> for x in range(2, n // 2+1):
(Pdb) condition 4 n > 5
New condition set for breakpoint 4.
(Pdb) continue
> c:\users\shoaib\desktop\debugging\test.py(4)IsPrime()
-> for x in range(2, n // 2+1):
(Pdb) clear 4
Deleted breakpoint 4 at c:\users\shoaib\desktop\debugging\test.py:4
(Pdb) ignore 2 2
*** Breakpoint 2 already deleted
(Pdb) continue
> c:\users\shoaib\desktop\debugging\test.py(4)IsPrime()
-> for x in range(2, n // 2+1):
(Pdb) break
Num Type         Disp Enb   Where
1   breakpoint   keep yes   at c:\users\shoaib\desktop\debugging\test.py:3
        breakpoint already hit 1 time
3   breakpoint   keep yes   at c:\users\shoaib\desktop\debugging\test.py:4
        stop only if n > 3
        breakpoint already hit 4 times
(Pdb) commands 2
(com) print(' n = ' + str(n))
(com) end
(Pdb) continue
5
> c:\users\shoaib\desktop\debugging\test.py(4)IsPrime()
-> for x in range(2, n // 2+1):
(Pdb) continue
> c:\users\shoaib\desktop\debugging\test.py(4)IsPrime()
-> for x in range(2, n // 2+1):
(Pdb) continue
> c:\users\shoaib\desktop\debugging\test.py(4)IsPrime()
-> for x in range(2, n // 2+1):
(Pdb) jump 6
> c:\users\shoaib\desktop\debugging\test.py(6)IsPrime()
-> return False;
(Pdb) run
Restarting test.py with arguments:
        test.py
> c:\users\shoaib\desktop\debugging\test.py(3)<module>()
-> def IsPrime(n):
(Pdb) jump 6
> c:\users\shoaib\desktop\debugging\test.py(6)<module>()
-> return False;
(Pdb)
####################REGULAR EXPRESSION###############

import re



# # print(re.search('pattern', 'Searching pattern in text'))
# match = re.search('pattern ','Searching pattern in text')
# # print(match) 
# print(match.re.pattern)
# print(match.string)
# print(match.start())
# print(match.end())
regex = re.compile('pattern')
# print(regex.findall('Searching pattern in text......')
print(re.match("Match","Match function test"))
print(re.match("test","Match function test"))
########################PATTERNS##############################
def all_matches(text,pattern):
	    print(pattern)
	    regobj = re.compile(pattern)
	    for m in regobj.finditer(text):
	    	print(str(m.start()) + '-' + str(m.end()) + ':'  + text[m.start() : m.end()])
# all_matches('xyyxxxxxyyyyxxxxyy', 'xy*')
# all_matches('xyyxxxxxyyyyxxxxyy', 'xy+')
# all_matches('xyyxxxxxyyyyxxxxyy', 'xy?')
# all_matches('xyyxxxxxyyyyxxxxyy', 'xy{2,}')
# all_matches('xyyxxxxxyyyyxxxxyy', 'xy[xy]+')
# all_matches('xx..    ..yyyxxxx', '[^.]+')
# all_matches ('A94B2c4  xyz08', '[A-Z][0-9]')
# # all_matches ('A94B2c4  xyz08', '[A-Za-z][0-9]')
# all_matches('Silk road', 'S.+k')
# all_matches("This is 1-st example", r'\W+')

all_matches ('Relative position in regular expression ', r'\Bg\B')
######################division and grouping the results in Pattern#############################
import re

# regex = re.compile('x(?[P<first>[xy]+)(?P<second>y)')
# match = regex.search('xyxxxyxxxyxyxy')
# # print(match.groups())
# # print(match.group('second'))
# print(match.groupdict())
regex = re.compile('y((x|y)+)')
match = regex.search('yxxyyxyxy')
print(match.group(2))

#############################
